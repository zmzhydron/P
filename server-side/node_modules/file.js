var fs = require('fs');
var path = require('path');

var origin,
	target,
	dirStr = '',
	syncType,
	text,
	req,
	res,
	ress,
	next,
	asdf,
	test,
	fntype;
//C:\zmzNode;
//C:\Users\zmz\AppData\Roaming\npm;
//C:\MyCodeBase\nodejs\node_global;
//C:\Program Files (x86)\Git\bin;
//C:\Program Files (x86)\SSH Communications Security\SSH Secure Shell
function checkPath(){
	return fs.existsSync(origin);
}	
/*
	读取、写入文件 分别有同步和异步的区分.
	pipe流。
	读取、创建文件夹。
*/

//读取文件
function readFile(){
	var option = {'encoding':"utf-8",'flag':'r'};
	if(syncType === 'async'){
		fs.readFile(origin,option,function(error,data){
			if(error){
				ress.send('read file at '+origin+' error!!!');
			}else{
				ress.send(data);
			}
		})
	}else{
		ress.send(fs.readFileSync(origin,option));
	}
}

//写入文件 必须得到一个文件表示符才能操作；
function writeFile(){
	var option = {'encoding':"utf-8",'flag':'w+'},
		r;
	switch(syncType){
		case 'sync':
			//同步写入 
			r = fs.writeFileSync(origin,text,option);
			console.log(r,"****************");
			ress.send(r+"");
		break;
		case 'simple':
		//简单写入
		fs.writeFile(origin,text,option,function(error){
			if(error){
				r = "error";
			}else{
				r = '完成啦';
			}
			ress.send(r);
		})
		break;
		case 'async':
			//open 方法不会使用NFS系统的缓存，比较耗费系统系能。
			var wirteFn = function(fd){
				fs.write(fd,text,null,null,function(error){
					if(error){

					}else{
						ress.send('asnyc write complete');
					}
				})
			}
			//异步打开，异步读取
			fs.open(origin,'w+',function(error,fd){
				if(error){

				}else{
					wirteFn(fd);
				}
			});
		break;
	}
}

//文件夹
function oprateDirectors(){
	var string = '',
		count = 0;
	function output(total){
		count++;
		if(count === total){
			ress.send(string);
		}
	}
	function walk(paths){
		fs.readdir(paths,function(error,fd){
			console.log(fd.length);
			for(var s = 0,len = fd.length;s<len;s++){
				var fullpath = path.join(paths,fd[s]);
				+function(fullpath){
					fs.stat(fullpath,function(error,stats){
						if(stats && stats.isFile()){
							// console.log(fullpath);
							string += fullpath +" </br>";
							// output(len);
						}
						else if(stats && stats.isDirectory()){
							walk(fullpath);
						}
					})
				}(fullpath);
			}
		})	
	}
	walk(target);
}

//流
function readStream(){
	var option = {'encoding':"utf-8",'flag':'r'};
	var readStream = fs.createReadStream(origin,option);
	var str = '';
	readStream.on('data',function(chunk){
		str += chunk;
	})
	readStream.on('end',function(){
		ress.send(str);
	})
}
function writeStream(){
	var option = {'encoding':"utf-8",'flag':'w+'};
	var writeStream = fs.createWriteStream(origin,option);
	writeStream.on('close',function(){
		ress.send('wirteStream closed');
	})
	writeStream.write(text);
	writeStream.end();
}
//复制
function copy(){
	var tar = fs.createWriteStream(target,{'encoding':"utf-8",'flag':'w+'});
	var ori = fs.createReadStream(origin,{'encoding':"utf-8",'flag':'r'});
	//pipe 复制;
	// ori.pipe(tar).on('close',function(){
	// 	ress.send('copy finished');
	// });
	//经典复制
	var line = '';
	ori.on('data',function(chunk){
		if(tar.write(chunk) === false){
			ori.pause();
			line += 'stream pause </br>';
		}
	})
	tar.on('drain',function(){
		ori.resume();
		line += 'stream resume </br>';
	})
	ori.on('end',function(){
		ress.send(line);
		tar.end();
	})
}
//创建文件夹
function makeDir(){
	//判断路径是否为文件夹;
	if(path.existsSync(origin)){
		fs.stat(origin,function(error,stats){
			if(error){
				ress.send('mkdir error');
			}else{
				if(stats.isFile()){
					ress.send('this is a filepath canot be create a directory');
				}else if(stats.isDirectory){
					fs.mkdir(origin,function(){
						ress.send('make directory sunccessed');
					})
				}
			}
		})
	}
}
//追加内容
function appendFile(){

}
//deleteFile
function deleteFile(){
	//异步
	if(syncType === 'asnyc'){
		fs.unlink(origin,function(error){
			if(error){
				ress.send('删除文件：'+origin+" 失败");
			}
		})
	}else{//同步
		var re = fs.unlinkSync(origin);
		ress.send(re);
	}
	
}
var fns = {
	readFile:readFile,
	writeFile:writeFile,
	walkDir:oprateDirectors,
	readStream:readStream,
	writeStream:writeStream,
	copy:copy,
	makeDir:makeDir,
	appendFile:appendFile,
	deleteFile:deleteFile
}
var copy = {
	say:function(){
		return 'origin is :' + origin + ' target is: '+ target;
	},
	setParams:function(obj,req,res,next){
		console.log(obj)
		origin = obj.ori;
		target = obj.tar;
		syncType = obj.type || 'asnyc';
		text = obj.text;
		res = res;
		ress = res;
		req = req;
		next = next;
		fntype = obj.fntype;
	},
	opfn:function(){
		fns[fntype]();
	}
}

module.exports = copy;